/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

async function sendRequest(url, method, headers, body) {
  headers['Content-Type'] = 'application/json';

  const resp = await fetch(url, {
    method,
    headers,
    body: body ? JSON.stringify(body) : null,
  });

  const json = await resp.json();

  if (json.code) {
    console.log("found error", json.code, json.message || json.msg);
    throw new Error(`${json.code} | ${json.message || json.msg} | ${method} ${url}`);
  }
  return json.data;
}

async function sendRequestFormData (url, headers, body) {
  const resp = await fetch(url, {
    method: "POST",
    headers,
    body: body || null,
  });

  const json = await resp.json();

  if (json.code) {
    console.log("quail client error", json.code, json.message || json.msg);
    throw new Error(`${json.code} | ${json.message || json.msg} | POST ${url}`);
  }


  return json.data || { code: json?.code, message: json?.message };
}

function getAccessTokenFromEnv() {
  let token = '';
  const auth = localStorage.getItem('auth');
  if (auth) {
    try {
      const authObj = JSON.parse(auth);
      token = authObj.access_token || authObj.token;
    } catch (e) {
      token = '';
    }
  }

  if (token === '') {
    token = window._access_token;
  }

  return token;
}

var Client = /** @class */ (function () {
    function Client(opts) {
        this.apibase = '';
        this.apikey = '';
        this.access_token = '';
        this.debug = false;
        this.apikey = opts.apikey || "";
        this.access_token = opts.access_token || "";
        this.apibase = opts.apibase || "https://api.quail.ink";
        this.debug = opts.debug || false;
    }
    Client.prototype.getAccessToken = function () {
        var token = this.access_token;
        if (token === '') {
            token = getAccessTokenFromEnv();
        }
        return token;
    };
    Client.prototype.request = function (url, method, body) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, token;
            return __generator(this, function (_a) {
                url = this.apibase + url;
                headers = {
                    'Content-Type': 'application/json',
                };
                token = this.getAccessToken();
                if (token) {
                    headers['Authorization'] = "Bearer ".concat(token);
                }
                if (this.apikey) {
                    headers['X-QUAIL-KEY'] = this.apikey;
                }
                if (this.debug) {
                    console.log("request: ".concat(method, " ").concat(url));
                    console.log("- headers", headers);
                    console.log("- body", body);
                }
                return [2 /*return*/, sendRequest(url, method, headers, body)];
            });
        });
    };
    Client.prototype.requestFormData = function (url, body) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, token;
            return __generator(this, function (_a) {
                url = this.apibase + url;
                headers = {};
                token = this.getAccessToken();
                if (token) {
                    headers['Authorization'] = "Bearer ".concat(token);
                }
                if (this.apikey) {
                    headers['X-QUAIL-KEY'] = this.apikey;
                }
                if (this.debug) {
                    console.log("request: POST ".concat(url));
                    console.log("- headers", headers);
                    console.log("- body", body);
                }
                return [2 /*return*/, sendRequestFormData(url, headers, body)];
            });
        });
    };
    Client.prototype.getAuthCode = function (email, ctoken) {
        var lang = navigator.language;
        if (lang.length > 2) {
            lang = lang.substring(0, 2);
        }
        return this.request("/auth/code", 'POST', {
            email: email,
            lang: lang,
            'challenge-action': 'request_auth_code',
            'challenge-token': ctoken,
        });
    };
    Client.prototype.login = function (email, code) {
        var lang = navigator.language;
        if (lang.length > 2) {
            lang = lang.substring(0, 2);
        }
        return this.request("/auth/login", 'POST', {
            "method": "email_code",
            "email": email,
            "code": code,
            "lang": lang
        });
    };
    Client.prototype.issueEphemeralToken = function (origin) {
        return this.request("/auth/ephemeral?origin=".concat(origin), 'POST', null);
    };
    Client.prototype.exchangeAccessTokenWithEphemeral = function (token) {
        return this.request("/auth/ephemeral/exchange?token=".concat(token), 'POST', null);
    };
    Client.prototype.getConfig = function () {
        return this.request("/c", 'GET', null);
    };
    Client.prototype.getMe = function () {
        return this.request("/users/me", 'GET', null);
    };
    Client.prototype.updateMe = function (profile) {
        return this.request("/users/me", 'PUT', profile);
    };
    Client.prototype.getUser = function (user_id) {
        return this.request("/users/".concat(user_id), 'GET', null);
    };
    Client.prototype.getUserLists = function (user_id) {
        return this.request("/users/".concat(user_id, "/lists"), 'GET', null);
    };
    Client.prototype.subscribe = function (list_id, email, ctoken) {
        return this.request("/subscriptions/".concat(list_id), 'POST', {
            email: email,
            'challenge-action': 'subscribe',
            'challenge-token': ctoken,
        });
    };
    Client.prototype.batchAddSubscribers = function (list_id, members, ctoken) {
        return this.request("/subscriptions/".concat(list_id, "/add-members"), 'POST', {
            'challenge-action': 'subscribe',
            'challenge-token': ctoken,
            'members': members,
        });
    };
    Client.prototype.updateSubscriber = function (list_id, member_id, payload) {
        return this.request("/subscriptions/".concat(list_id, "/members/").concat(member_id), 'PUT', payload);
    };
    Client.prototype.deleteSubscriber = function (list_id, member_id) {
        return this.request("/subscriptions/".concat(list_id, "/members/").concat(member_id), 'DELETE', null);
    };
    Client.prototype.getMySubscriptions = function () {
        return this.request("/subscriptions", 'GET', null);
    };
    Client.prototype.getMySubscription = function (list_id) {
        return this.request("/subscriptions/".concat(list_id, "/rel"), 'GET', null);
    };
    Client.prototype.subscribeNoChallenge = function (list_id) {
        return this.request("/subscriptions/".concat(list_id, "/no-challenge"), 'POST', null);
    };
    Client.prototype.unsubscribe = function (list_id, trace_id) {
        if (trace_id === void 0) { trace_id = ""; }
        return this.request("/subscriptions/".concat(list_id), 'DELETE', { trace_id: trace_id });
    };
    Client.prototype.getUnsubscribeOpponent = function (trace_id) {
        return this.request("/subscriptions/opponent?trace_id=".concat(trace_id), 'GET', null);
    };
    Client.prototype.getListPosts = function (list_id, offset, limit, pub, sort) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 16; }
        if (pub === void 0) { pub = false; }
        if (sort === void 0) { sort = ''; }
        var url = "/lists/".concat(list_id, "/posts?offset=").concat(offset, "&limit=").concat(limit);
        if (pub) {
            url += "&public=1";
        }
        if (sort) {
            url += "&sort=".concat(sort);
        }
        return this.request(url, 'GET', null);
    };
    Client.prototype.getListDelivery = function (list_id, offset, limit) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 10; }
        return this.request("/lists/".concat(list_id, "/delivery?offset=").concat(offset, "&limit=").concat(limit), 'GET', null);
    };
    Client.prototype.cancelScheduledDelivery = function (list_id, delivery_id) {
        return this.request("/lists/".concat(list_id, "/delivery/").concat(delivery_id, "/cancel"), 'PUT', null);
    };
    Client.prototype.getPinnedPosts = function (list_id) {
        return this.request("/lists/".concat(list_id, "/pinned"), 'GET', null);
    };
    Client.prototype.pinPosts = function (list_id, ids) {
        return this.request("/lists/".concat(list_id, "/pinned"), 'PUT', { ids: ids });
    };
    Client.prototype.getPost = function (list_id, post_id) {
        return this.request("/lists/".concat(list_id, "/posts/").concat(post_id), 'GET', null);
    };
    Client.prototype.deletePost = function (list_id, post_id) {
        return this.request("/lists/".concat(list_id, "/posts/").concat(post_id), 'DELETE', null);
    };
    Client.prototype.getPostContent = function (list_id, post_id) {
        return this.request("/lists/".concat(list_id, "/posts/").concat(post_id, "/content"), 'GET', null);
    };
    Client.prototype.createList = function (payload) {
        return this.request("/lists", 'POST', payload);
    };
    Client.prototype.getLists = function (user_id) {
        return this.request("/users/".concat(user_id, "/lists"), 'GET', null);
    };
    Client.prototype.getList = function (list_id) {
        return this.request("/lists/".concat(list_id), 'GET', null);
    };
    Client.prototype.getListByDomain = function (domain) {
        return this.request("/lists/domains/".concat(domain), 'GET', null);
    };
    Client.prototype.getListMetrics = function (list_id) {
        return this.request("/lists/".concat(list_id, "/metrics"), 'GET', null);
    };
    Client.prototype.updateList = function (list_id, payload) {
        return this.request("/lists/".concat(list_id), 'PUT', payload);
    };
    Client.prototype.updateListBulletin = function (list_id, payload) {
        return this.request("/lists/".concat(list_id, "/bulletin"), 'PUT', payload);
    };
    Client.prototype.updateListChannel = function (list_id, payload) {
        return this.request("/lists/".concat(list_id, "/channel"), 'PUT', payload);
    };
    Client.prototype.getListChannel = function (list_id) {
        return this.request("/lists/".concat(list_id, "/channel"), 'GET', null);
    };
    Client.prototype.createListChannelLineKeys = function (list_id) {
        return this.request("/lists/".concat(list_id, "/channel/line/keys"), 'POST', null);
    };
    Client.prototype.updateListAnalytics = function (list_id, payload) {
        return this.request("/lists/".concat(list_id, "/analytics"), 'PUT', payload);
    };
    Client.prototype.updateListEmailSettings = function (list_id, payload) {
        if (payload.email_signature_text.length > 2048) {
            payload.email_signature_text = payload.email_signature_text.substring(0, 2048);
        }
        if (payload.email_onboarding_text.length > 2048) {
            payload.email_onboarding_text = payload.email_onboarding_text.substring(0, 2048);
        }
        return this.request("/lists/".concat(list_id, "/email_settings"), 'PUT', {
            "email_channel_enabled": payload.email_channel_enabled,
            "email_deny_list": payload.email_deny_list || [],
            "email_onboarding_text": payload.email_onboarding_text || "",
            "email_signature_text": payload.email_signature_text || "",
        });
    };
    Client.prototype.updateListSlug = function (list_id, slug) {
        return this.request("/lists/".concat(list_id, "/slug?slug=").concat(slug), 'PUT', null);
    };
    Client.prototype.updateListDomain = function (list_id, payload) {
        return this.request("/lists/".concat(list_id, "/domain"), 'PUT', payload);
    };
    Client.prototype.updateListComment = function (list_id, payload) {
        return this.request("/lists/".concat(list_id, "/comment"), 'PUT', payload);
    };
    Client.prototype.updateListTweets = function (list_id, payload) {
        return this.request("/lists/".concat(list_id, "/tweets"), 'PUT', payload);
    };
    Client.prototype.updateListCooperators = function (list_id, payload) {
        return this.request("/lists/".concat(list_id, "/cooperators"), 'PUT', payload);
    };
    Client.prototype.getListSubscriptions = function (list_id, offset, limit, email, premium) {
        if (email === void 0) { email = ""; }
        if (premium === void 0) { premium = ""; }
        var url = "/lists/".concat(list_id, "/subscriptions?offset=").concat(offset, "&limit=").concat(limit);
        if (email) {
            url += "&email=".concat(encodeURIComponent(email));
        }
        if (premium) {
            url += "&premium=".concat(premium);
        }
        return this.request(url, 'GET', null);
    };
    Client.prototype.getApikeys = function () {
        return this.request("/apikeys", 'GET', null);
    };
    Client.prototype.deleteApikey = function (id) {
        return this.request("/apikeys/".concat(id), 'DELETE', null);
    };
    Client.prototype.createApikey = function (name) {
        return this.request("/apikeys", 'POST', {
            name: name,
        });
    };
    Client.prototype.generateFrontmatter = function (title, content, includes) {
        if (includes === void 0) { includes = []; }
        var url = "/composer/frontmatter";
        if (includes.length > 0) {
            url = "".concat(url, "?includes=").concat(includes.map(function (x) { return encodeURIComponent(x.toLowerCase()); }).join(','));
        }
        return this.request(url, 'POST', {
            title: title,
            content: content
        });
    };
    Client.prototype.generateMetadata = function (title, content, includes) {
        if (includes === void 0) { includes = []; }
        var url = "/composer/metadata";
        if (includes.length > 0) {
            url = "".concat(url, "?includes=").concat(includes.map(function (x) { return encodeURIComponent(x.toLowerCase()); }).join(','));
        }
        return this.request(url, 'POST', {
            title: title,
            content: content
        });
    };
    Client.prototype.generateTweets = function (title, content) {
        var url = "/composer/generate-tweets";
        return this.request(url, 'POST', {
            title: title,
            content: content
        });
    };
    Client.prototype.searchPhotos = function (query, page, limit) {
        if (page === void 0) { page = 1; }
        if (limit === void 0) { limit = 10; }
        query = encodeURIComponent(query);
        return this.request("/composer/unsplash/photos/search?query=".concat(query, "&page=").concat(page, "&limit=").concat(limit), 'GET', null);
    };
    Client.prototype.getPhotoDownloadUrl = function (endpoint) {
        endpoint = encodeURIComponent(endpoint);
        return this.request("/composer/unsplash/photos/download_url?endpoint=".concat(endpoint), 'GET', null);
    };
    Client.prototype.createPost = function (listID, payload) {
        return this.request("/lists/".concat(listID, "/posts"), 'POST', payload);
    };
    Client.prototype.updatePost = function (listID, postID, payload) {
        return this.request("/lists/".concat(listID, "/posts/").concat(postID, "/update"), 'PUT', payload);
    };
    Client.prototype.updatePostOptions = function (listID, postID, payload) {
        return this.request("/lists/".concat(listID, "/posts/").concat(postID, "/options"), 'PUT', payload);
    };
    Client.prototype.publishPost = function (listID, slug) {
        return this.request("/lists/".concat(listID, "/posts/").concat(slug, "/publish"), 'PUT', null);
    };
    Client.prototype.unpublishPost = function (listID, slug) {
        return this.request("/lists/".concat(listID, "/posts/").concat(slug, "/unpublish"), 'PUT', null);
    };
    Client.prototype.deliverPost = function (listID, slug, scheduledAt) {
        var payload = null;
        if (scheduledAt) {
            payload = {
                scheduled_at: scheduledAt,
            };
        }
        return this.request("/lists/".concat(listID, "/posts/").concat(slug, "/deliver"), 'PUT', payload);
    };
    Client.prototype.createPostPreviewToken = function (listID, slug) {
        return this.request("/lists/".concat(listID, "/posts/").concat(slug, "/preview"), 'POST', null);
    };
    Client.prototype.getPostPreviewUrl = function (listID, slug, token) {
        return "".concat(this.apibase, "/lists/").concat(listID, "/posts/").concat(slug, "/preview?access_token=").concat(token);
    };
    Client.prototype.uploadAttachment = function (formData) {
        return this.requestFormData("/attachments", formData);
    };
    Client.prototype.incCount = function (post_id, field) {
        return this.request("/posts/".concat(field, "?id=").concat(post_id), 'POST', null);
    };
    Client.prototype.getPostsOfMySubscriptions = function (offset, limit) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 16; }
        return this.request("/posts/subscribed?offset=".concat(offset, "&limit=").concat(limit), 'GET', null);
    };
    Client.prototype.getExploreTrendingPosts = function (offset, limit, lang) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 16; }
        if (lang === void 0) { lang = ''; }
        var url = "/explore/trending/posts?offset=".concat(offset, "&limit=").concat(limit);
        if (lang) {
            url += "&lang=".concat(lang);
        }
        return this.request(url, 'GET', null);
    };
    Client.prototype.getExploreTrendingLists = function (offset, limit, lang) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 16; }
        if (lang === void 0) { lang = ''; }
        var url = "/explore/trending/lists?offset=".concat(offset, "&limit=").concat(limit);
        if (lang) {
            url += "&lang=".concat(lang);
        }
        return this.request(url, 'GET', null);
    };
    Client.prototype.getComments = function (post_id, offset, limit) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 16; }
        return this.request("/comments?post_id=".concat(post_id, "&offset=").concat(offset, "&limit=").concat(limit), 'GET', null);
    };
    Client.prototype.getCommentsByList = function (list_id, offset, limit) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 16; }
        return this.request("/comments?list_id=".concat(list_id, "&offset=").concat(offset, "&limit=").concat(limit), 'GET', null);
    };
    Client.prototype.createComment = function (payload) {
        return this.request("/comments", 'POST', payload);
    };
    Client.prototype.deleteComment = function (comment_id) {
        return this.request("/comments/".concat(comment_id), 'DELETE', null);
    };
    Client.prototype.approveComment = function (comment_id) {
        return this.request("/comments/".concat(comment_id, "/approve"), 'PUT', null);
    };
    Client.prototype.rejectComment = function (comment_id) {
        return this.request("/comments/".concat(comment_id, "/reject"), 'PUT', null);
    };
    // obsolete
    Client.prototype.getMyOrders = function (offset, limit) {
        var url = "/users/me/orders?offset=".concat(offset, "&limit=").concat(limit);
        return this.request(url, 'GET', null);
    };
    Client.prototype.getOrder = function (order_id) {
        var url = "/orders/".concat(order_id);
        return this.request(url, 'GET', null);
    };
    Client.prototype.upgradeSubscription = function (list_id, approach, redirect_url, plan, dur) {
        if (approach === void 0) { approach = "mixpay"; }
        if (redirect_url === void 0) { redirect_url = ""; }
        if (plan === void 0) { plan = "silver"; }
        if (dur === void 0) { dur = 365; }
        // default dur = 365 days
        return this.request("/subscriptions/".concat(list_id, "/upgrade?approach=").concat(approach, "&redirect_url=").concat(redirect_url, "&plan=").concat(plan, "&dur=").concat(dur), 'POST', null);
    };
    Client.prototype.getListOrders = function (list_id, offset, limit) {
        var url = "/lists/".concat(list_id, "/orders?offset=").concat(offset, "&limit=").concat(limit);
        return this.request(url, 'GET', null);
    };
    Client.prototype.getListIncomes = function (list_id, year) {
        var url = "/lists/".concat(list_id, "/incomes?year=").concat(year);
        return this.request(url, 'GET', null);
    };
    Client.prototype.getListPayments = function (list_id) {
        return this.request("/lists/".concat(list_id, "/payments"), 'GET', null);
    };
    Client.prototype.updateListPayments = function (list_id, payload) {
        return this.request("/lists/".concat(list_id, "/payments"), 'PUT', payload);
    };
    // tweets
    Client.prototype.getTweets = function (list_id, offset, limit, pub) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 16; }
        if (pub === void 0) { pub = false; }
        var url = "/tweets?list=".concat(list_id, "&offset=").concat(offset, "&limit=").concat(limit);
        if (pub) {
            url += "&public=1";
        }
        return this.request(url, 'GET', null);
    };
    Client.prototype.getTweet = function (tweet_id) {
        var url = "/tweets/".concat(tweet_id);
        return this.request(url, 'GET', null);
    };
    Client.prototype.getPinnedTweets = function (list_id) {
        return this.request("/tweets/pinned?list=".concat(list_id), 'GET', null);
    };
    Client.prototype.createTweet = function (list_id, payload) {
        return this.request("/tweets?list=".concat(list_id), 'POST', payload);
    };
    Client.prototype.updateTweet = function (tweet_id, payload) {
        return this.request("/tweets/".concat(tweet_id), 'PUT', payload);
    };
    Client.prototype.deleteTweet = function (tweet_id) {
        return this.request("/tweets/".concat(tweet_id), 'DELETE', null);
    };
    Client.prototype.reactTweet = function (tweet_id, payload) {
        return this.request("/tweets/".concat(tweet_id, "/reactions"), 'POST', payload);
    };
    Client.prototype.pinTweet = function (tweet_id) {
        return this.request("/tweets/".concat(tweet_id, "/pin"), 'PUT', null);
    };
    Client.prototype.unpinTweet = function (tweet_id) {
        return this.request("/tweets/".concat(tweet_id, "/unpin"), 'DELETE', null);
    };
    Client.prototype.setTweetPremium = function (tweet_id, premium) {
        return this.request("/tweets/".concat(tweet_id, "/premium"), 'PUT', { premium: premium });
    };
    Client.prototype.setTweetNonPremium = function (tweet_id) {
        return this.request("/tweets/".concat(tweet_id, "/premium"), 'DELETE', null);
    };
    Client.prototype.getTweetReplies = function (tweet_id, offset, limit) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 16; }
        return this.request("/tweets/".concat(tweet_id, "/replies?offset=").concat(offset, "&limit=").concat(limit), 'GET', null);
    };
    Client.prototype.createTweetReply = function (payload) {
        return this.request("/tweets/".concat(payload.tweet_id, "/replies"), 'POST', payload);
    };
    Client.prototype.deleteTweetReply = function (tweet_id, reply_id) {
        return this.request("/tweets/".concat(tweet_id, "/replies/").concat(reply_id), 'DELETE', null);
    };
    return Client;
}());

class AuxiliaClient{
  apibase = '';
  apikey = '';
  access_token = '';
  debug = false;

	constructor(opts) {
    this.apikey = opts.apikey || "";
    this.access_token = opts.access_token || "";
    this.apibase = opts.apibase || "https://api.quail.ink/auxilia";
    this.debug = opts.debug || false;
	}

  getAccessToken() {
    let token = this.access_token;
    if (token === '') {
      token = getAccessTokenFromEnv();
    }
    return token;
  }

  async request(url, method, body) {
    url = this.apibase + url;
    const headers = {
      'Content-Type': 'application/json',
    };

    // try to use token from environment
    const token = this.getAccessToken();
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    if (this.apikey) {
      headers['X-QUAIL-KEY'] = this.apikey;
    }

    if (this.debug) {
      console.log(`request: ${method} ${url}`);
      console.log("- headers", headers);
      console.log("- body", body);
    }

    return sendRequest(url, method, headers, body);
  }

  async requestFormData (url, body) {
    url = this.apibase + url;
    const headers = {};

    // try to use token from environment
    const token = this.getAccessToken();
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    if (this.apikey) {
      headers['X-QUAIL-KEY'] = this.apikey;
    }

    if (this.debug) {
      console.log(`request: POST ${url}`);
      console.log("- headers", headers);
      console.log("- body", body);
    }

    return sendRequestFormData(url, headers, body);
  }

  getConfig() {
    return this.request(`/c`, 'GET', null)
  }

  // place orders
  placeSubscriptionOrder(list_id, approach = "mixpay", redirect_url = "", plan="silver", dur=365) {
    // default dur = 365 days
    return this.request(`/orders/lists/${list_id}/upgrade?approach=${approach}&redirect_url=${redirect_url}&plan=${plan}&dur=${dur}`, 'POST', null)
  }

  // read orders
  getOrder(id) {
    const url = `/orders/${id}`;
    return this.request(url, 'GET', null)
  }

  getMyOrders(offset, limit) {
    const url = `/orders/me?offset=${offset}&limit=${limit}`;
    return this.request(url, 'GET', null)
  }

  getListOrders(list_id, offset, limit) {
    const url = `/orders/lists/${list_id}?offset=${offset}&limit=${limit}`;
    return this.request(url, 'GET', null)
  }

  // subscriptions
  modSubscriptionMember(list_id, member_id, payload) {
    const url = `/subscriptions/${list_id}/members/${member_id}`;
    return this.request(url, 'PUT', payload)
  }

  // List Incomes List
  getListIncomes(list_id, year) {
    const url = `/lists/${list_id}/incomes?year=${year}`;
    return this.request(url, 'GET', null)
  }

  // Payments Settings
  getListPayments(list_id) {
    return this.request(`/lists/${list_id}/payments`, 'GET', null)
  }

  // @TODO: remove
  updateListPayments(list_id, payload) {
    return this.request(`/lists/${list_id}/payments`, 'PUT', payload)
  }

  updateListCryptoPayments(list_id, payload) {
    return this.request(`/lists/${list_id}/payments/crypto`, 'PUT', payload)
  }

  updateListFiatPayments(list_id, payload) {
    return this.request(`/lists/${list_id}/payments/fiat`, 'PUT', payload)
  }

  // Payouts
  getPayout() {
    return this.request(`/payouts`, 'GET', null)
  }

  // Payouts - Stripe
  connectToStripe(country) {
    return this.request(`/stripe/express?country=${country}`, 'POST', null)
  }

  genStripeLoginURL() {
    return this.request(`/stripe/express/login`, 'POST', null)
  }

  // Payouts - Crypto
  updateCryptoPayout(payload) {
    return this.request(`/payouts/crypto`, 'PUT', payload)
  }

  // Payouts - Paypal
  updatePaypalPayout(payload) {
    return this.request(`/payouts/paypal`, 'PUT', payload)
  }

  registerEvm(network) {
    return this.request(`/payouts/evm/register?network=${network}`, 'POST')
  }

  unregisterEvm(network) {
    return this.request(`/payouts/evm/unregister?network=${network}`, 'POST')
  }

  // utils
  proxyToDiscord(pathname, query) {
    return this.request(`/proxy/discord?pathname=${pathname}&query=${encodeURIComponent(query)}`, 'GET', null)
  }

  // Abuse Reports
  getAbuseReportOpponent(trace_id) {
    return this.request(`/reports/opponent?trace_id=${trace_id}`, 'GET', null)
  }

  // crypto
  getCryptos() {
    return this.request(`/cryptos`, 'GET', null)
  }

  getCrypto(symbol) {
    return this.request(`/cryptos/${symbol}`, 'GET', null)
  }

  // currency
  getCurrencies() {
    return this.request(`/currencies`, 'GET', null)
  }

  getCurrency(code) {
    return this.request(`/currencies/${code}`, 'GET', null)
  }

  // country
  getCountries() {
    return this.request(`/countries`, 'GET', null)
  }

  getCountryByAlpha2(code) {
    return this.request(`/countries/alpha-2/${code}`, 'GET', null)
  }

  createAbuseReport(payload, ctoken) {
    return this.request(`/reports`, 'POST', {
      'challenge-action': 'abuse-report',
      'challenge-token': ctoken,
      ...payload,
    })
  }

  getAbuseReportOpponent(trace_id) {
    return this.request(`/reports/opponent?trace_id=${trace_id}`, 'GET', null)
  }

  createAbuseReport(payload, ctoken) {
    return this.request(`/reports`, 'POST', {
      'challenge-action': 'abuse-report',
      'challenge-token': ctoken,
      ...payload,
    })
  }
}

export { AuxiliaClient, Client };
//# sourceMappingURL=quail.min.js.map
