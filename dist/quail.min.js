/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var Client = /** @class */ (function () {
    function Client(opts) {
        this.apibase = '';
        this.apikey = '';
        this.access_token = '';
        this.debug = false;
        this.apikey = opts.apikey || "";
        this.access_token = opts.access_token || "";
        this.apibase = opts.apibase || "https://api.quail.ink";
        this.debug = opts.debug || false;
    }
    Client.prototype.getAccessToken = function () {
        var token = this.access_token;
        if (token === '') {
            var auth = localStorage.getItem('auth');
            if (auth) {
                try {
                    var authObj = JSON.parse(auth);
                    token = authObj.access_token || authObj.token;
                }
                catch (e) {
                    token = '';
                }
            }
        }
        if (token === '') {
            token = window._access_token;
        }
        return token;
    };
    Client.prototype.request = function (url, method, body) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, token, resp, json;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.apibase + url;
                        headers = {
                            'Content-Type': 'application/json',
                        };
                        token = this.getAccessToken();
                        if (token) {
                            headers['Authorization'] = "Bearer ".concat(token);
                        }
                        if (this.apikey) {
                            headers['X-QUAIL-Key'] = this.apikey;
                        }
                        if (this.debug) {
                            console.log("request method", method);
                            console.log("request url", url);
                            console.log("request headers", headers);
                            console.log("request body", body);
                        }
                        return [4 /*yield*/, fetch(url, {
                                method: method,
                                headers: headers,
                                body: body ? JSON.stringify(body) : null,
                            })];
                    case 1:
                        resp = _a.sent();
                        return [4 /*yield*/, resp.json()];
                    case 2:
                        json = _a.sent();
                        if (this.debug) {
                            console.log("resp json", json);
                        }
                        if (json.code) {
                            console.log("quail client error", json.code, json.message || json.msg);
                            throw new Error("".concat(json.code, " | ").concat(json.message || json.msg, " | ").concat(method, " ").concat(url));
                        }
                        return [2 /*return*/, json.data];
                }
            });
        });
    };
    Client.prototype.requestFormData = function (url, body) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, token, resp, json;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.apibase + url;
                        headers = {};
                        token = this.getAccessToken();
                        if (token) {
                            headers['Authorization'] = "Bearer ".concat(token);
                        }
                        if (this.apikey) {
                            headers['X-QUAIL-Key'] = this.apikey;
                        }
                        if (this.debug) {
                            console.log("request url", url);
                            console.log("request headers", headers);
                            console.log("request body", body);
                        }
                        return [4 /*yield*/, fetch(url, {
                                method: "POST",
                                headers: headers,
                                body: body || null,
                            })];
                    case 1:
                        resp = _a.sent();
                        return [4 /*yield*/, resp.json()];
                    case 2:
                        json = _a.sent();
                        if (this.debug) {
                            console.log("resp json", json);
                        }
                        if (json.code) {
                            console.log("quail client error", json.code, json.message || json.msg);
                            throw new Error("".concat(json.code, " | ").concat(json.message || json.msg, " | POST ").concat(url));
                        }
                        return [2 /*return*/, json.data || { code: json === null || json === void 0 ? void 0 : json.code, message: json === null || json === void 0 ? void 0 : json.message }];
                }
            });
        });
    };
    Client.prototype.getAuthCode = function (email, ctoken) {
        var lang = navigator.language;
        if (lang.length > 2) {
            lang = lang.substring(0, 2);
        }
        return this.request("/auth/code", 'POST', {
            email: email,
            lang: lang,
            'challenge-action': 'request_auth_code',
            'challenge-token': ctoken,
        });
    };
    Client.prototype.login = function (email, code) {
        var lang = navigator.language;
        if (lang.length > 2) {
            lang = lang.substring(0, 2);
        }
        return this.request("/auth/login", 'POST', {
            "method": "email_code",
            "email": email,
            "code": code,
            "lang": lang
        });
    };
    Client.prototype.getConfig = function () {
        return this.request("/c", 'GET', null);
    };
    Client.prototype.getCurrencies = function () {
        return this.request("/currencies", 'GET', null);
    };
    Client.prototype.getCurrency = function (code) {
        return this.request("/currencies/".concat(code), 'GET', null);
    };
    Client.prototype.getAssets = function () {
        return this.request("/assets", 'GET', null);
    };
    Client.prototype.getAsset = function (assetId) {
        return this.request("/assets/".concat(assetId), 'GET', null);
    };
    Client.prototype.getMe = function () {
        return this.request("/users/me", 'GET', null);
    };
    Client.prototype.updateMe = function (profile) {
        return this.request("/users/me", 'PUT', profile);
    };
    Client.prototype.getMyOrders = function (offset, limit) {
        var url = "/users/me/orders?offset=".concat(offset, "&limit=").concat(limit);
        return this.request(url, 'GET', null);
    };
    Client.prototype.getOrder = function (order_id) {
        var url = "/orders/".concat(order_id);
        return this.request(url, 'GET', null);
    };
    Client.prototype.getUser = function (user_id) {
        return this.request("/users/".concat(user_id), 'GET', null);
    };
    Client.prototype.getUserLists = function (user_id) {
        return this.request("/users/".concat(user_id, "/lists"), 'GET', null);
    };
    Client.prototype.subscribe = function (list_id, email, ctoken) {
        return this.request("/subscriptions/".concat(list_id), 'POST', {
            email: email,
            'challenge-action': 'subscribe',
            'challenge-token': ctoken,
        });
    };
    Client.prototype.batchAddSubscribers = function (list_id, members, ctoken) {
        return this.request("/subscriptions/".concat(list_id, "/add-members"), 'POST', {
            'challenge-action': 'subscribe',
            'challenge-token': ctoken,
            'members': members,
        });
    };
    Client.prototype.updateSubscriber = function (list_id, member_id, payload) {
        return this.request("/subscriptions/".concat(list_id, "/members/").concat(member_id), 'PUT', payload);
    };
    Client.prototype.deleteSubscriber = function (list_id, member_id) {
        return this.request("/subscriptions/".concat(list_id, "/members/").concat(member_id), 'DELETE', null);
    };
    Client.prototype.getMySubscriptions = function () {
        return this.request("/subscriptions", 'GET', null);
    };
    Client.prototype.getMySubscription = function (list_id) {
        return this.request("/subscriptions/".concat(list_id, "/rel"), 'GET', null);
    };
    Client.prototype.subscribeNoChallenge = function (list_id) {
        return this.request("/subscriptions/".concat(list_id, "/no-challenge"), 'POST', null);
    };
    Client.prototype.unsubscribe = function (list_id, trace_id) {
        if (trace_id === void 0) { trace_id = ""; }
        return this.request("/subscriptions/".concat(list_id), 'DELETE', { trace_id: trace_id });
    };
    Client.prototype.upgradeSubscription = function (list_id, redirect_url, plan, dur) {
        if (redirect_url === void 0) { redirect_url = ""; }
        if (plan === void 0) { plan = "silver"; }
        if (dur === void 0) { dur = 90; }
        // default dur = 90 days
        return this.request("/subscriptions/".concat(list_id, "/upgrade?redirect_url=").concat(redirect_url, "&plan=").concat(plan, "&dur=").concat(dur), 'POST', null);
    };
    Client.prototype.getListPosts = function (list_id, offset, limit, pub) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 16; }
        if (pub === void 0) { pub = false; }
        var url = "/lists/".concat(list_id, "/posts?offset=").concat(offset, "&limit=").concat(limit);
        if (pub) {
            url += "&public=1";
        }
        return this.request(url, 'GET', null);
    };
    Client.prototype.getListDelivery = function (list_id, offset, limit) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 10; }
        return this.request("/lists/".concat(list_id, "/delivery?offset=").concat(offset, "&limit=").concat(limit), 'GET', null);
    };
    Client.prototype.cancelScheduledDelivery = function (list_id, delivery_id) {
        return this.request("/lists/".concat(list_id, "/delivery/").concat(delivery_id, "/cancel"), 'PUT', null);
    };
    Client.prototype.getPinnedPosts = function (list_id) {
        return this.request("/lists/".concat(list_id, "/pinned"), 'GET', null);
    };
    Client.prototype.pinPosts = function (list_id, ids) {
        return this.request("/lists/".concat(list_id, "/pinned"), 'PUT', { ids: ids });
    };
    Client.prototype.getPost = function (list_id, post_id) {
        return this.request("/lists/".concat(list_id, "/posts/").concat(post_id), 'GET', null);
    };
    Client.prototype.deletePost = function (list_id, post_id) {
        return this.request("/lists/".concat(list_id, "/posts/").concat(post_id), 'DELETE', null);
    };
    Client.prototype.getPostContent = function (list_id, post_id) {
        return this.request("/lists/".concat(list_id, "/posts/").concat(post_id, "/content"), 'GET', null);
    };
    Client.prototype.getListOrders = function (list_id, offset, limit) {
        var url = "/lists/".concat(list_id, "/orders?offset=").concat(offset, "&limit=").concat(limit);
        return this.request(url, 'GET', null);
    };
    Client.prototype.createList = function (payload) {
        return this.request("/lists", 'POST', payload);
    };
    Client.prototype.getLists = function (user_id) {
        return this.request("/users/".concat(user_id, "/lists"), 'GET', null);
    };
    Client.prototype.getList = function (list_id) {
        return this.request("/lists/".concat(list_id), 'GET', null);
    };
    Client.prototype.getListPayments = function (list_id) {
        return this.request("/lists/".concat(list_id, "/payments"), 'GET', null);
    };
    Client.prototype.getListMetrics = function (list_id) {
        return this.request("/lists/".concat(list_id, "/metrics"), 'GET', null);
    };
    Client.prototype.updateList = function (list_id, payload) {
        return this.request("/lists/".concat(list_id), 'PUT', {
            "avatar_image_url": payload.avatar_image_url || '',
            "title": payload.title || '',
            "description": payload.description || '',
        });
    };
    Client.prototype.updateListTelegram = function (list_id, payload) {
        return this.request("/lists/".concat(list_id, "/telegram"), 'PUT', {
            "telegram_bot_token": payload.telegram_bot_token || '',
            "telegram_channel_id": payload.telegram_channel_id || '',
        });
    };
    Client.prototype.updateListPayments = function (list_id, payload) {
        return this.request("/lists/".concat(list_id, "/payments"), 'PUT', payload);
    };
    Client.prototype.updateListAnalytics = function (list_id, payload) {
        return this.request("/lists/".concat(list_id, "/analytics"), 'PUT', payload);
    };
    Client.prototype.updateListEmailSettings = function (list_id, payload) {
        if (payload.email_signature_text.length > 2048) {
            payload.email_signature_text = payload.email_signature_text.substring(0, 2048);
        }
        if (payload.email_onboarding_text.length > 2048) {
            payload.email_onboarding_text = payload.email_onboarding_text.substring(0, 2048);
        }
        return this.request("/lists/".concat(list_id, "/email_settings"), 'PUT', {
            "email_channel_enabled": payload.email_channel_enabled,
            "email_deny_list": payload.email_deny_list || [],
            "email_onboarding_text": payload.email_onboarding_text || "",
            "email_signature_text": payload.email_signature_text || "",
        });
    };
    Client.prototype.updateListSlug = function (list_id, slug) {
        return this.request("/lists/".concat(list_id, "/slug?slug=").concat(slug), 'PUT', null);
    };
    Client.prototype.getListSubscriptions = function (list_id, offset, limit, email, premium) {
        if (email === void 0) { email = ""; }
        if (premium === void 0) { premium = ""; }
        var url = "/lists/".concat(list_id, "/subscriptions?offset=").concat(offset, "&limit=").concat(limit);
        if (email) {
            url += "&email=".concat(encodeURIComponent(email));
        }
        if (premium) {
            url += "&premium=".concat(premium);
        }
        return this.request(url, 'GET', null);
    };
    Client.prototype.getApikeys = function () {
        return this.request("/apikeys", 'GET', null);
    };
    Client.prototype.deleteApikey = function (id) {
        return this.request("/apikeys/".concat(id), 'DELETE', null);
    };
    Client.prototype.createApikey = function (name) {
        return this.request("/apikeys", 'POST', {
            name: name,
        });
    };
    Client.prototype.generateFrontmatter = function (title, content, includes) {
        if (includes === void 0) { includes = []; }
        var url = "/composer/frontmatter";
        if (includes.length > 0) {
            url = "".concat(url, "?includes=").concat(includes.map(function (x) { return encodeURIComponent(x.toLowerCase()); }).join(','));
        }
        return this.request(url, 'POST', {
            title: title,
            content: content
        });
    };
    Client.prototype.generateMetadata = function (title, content, includes) {
        if (includes === void 0) { includes = []; }
        var url = "/composer/metadata";
        if (includes.length > 0) {
            url = "".concat(url, "?includes=").concat(includes.map(function (x) { return encodeURIComponent(x.toLowerCase()); }).join(','));
        }
        return this.request(url, 'POST', {
            title: title,
            content: content
        });
    };
    Client.prototype.generateTweets = function (title, content) {
        var url = "/composer/generate-tweets";
        return this.request(url, 'POST', {
            title: title,
            content: content
        });
    };
    Client.prototype.searchPhotos = function (query, page, limit) {
        if (page === void 0) { page = 1; }
        if (limit === void 0) { limit = 10; }
        query = encodeURIComponent(query);
        return this.request("/composer/unsplash/photos/search?query=".concat(query, "&page=").concat(page, "&limit=").concat(limit), 'GET', null);
    };
    Client.prototype.getPhotoDownloadUrl = function (endpoint) {
        endpoint = encodeURIComponent(endpoint);
        return this.request("/composer/unsplash/photos/download_url?endpoint=".concat(endpoint), 'GET', null);
    };
    Client.prototype.createPost = function (listID, payload) {
        return this.request("/lists/".concat(listID, "/posts"), 'POST', payload);
    };
    Client.prototype.updatePost = function (listID, postID, payload) {
        return this.request("/lists/".concat(listID, "/posts/").concat(postID, "/update"), 'PUT', payload);
    };
    Client.prototype.updatePostOptions = function (listID, postID, payload) {
        return this.request("/lists/".concat(listID, "/posts/").concat(postID, "/options"), 'PUT', payload);
    };
    Client.prototype.publishPost = function (listID, slug) {
        return this.request("/lists/".concat(listID, "/posts/").concat(slug, "/publish"), 'PUT', null);
    };
    Client.prototype.unpublishPost = function (listID, slug) {
        return this.request("/lists/".concat(listID, "/posts/").concat(slug, "/unpublish"), 'PUT', null);
    };
    Client.prototype.deliverPost = function (listID, slug, scheduledAt) {
        var payload = null;
        if (scheduledAt) {
            payload = {
                scheduled_at: scheduledAt,
            };
        }
        return this.request("/lists/".concat(listID, "/posts/").concat(slug, "/deliver"), 'PUT', payload);
    };
    Client.prototype.createPostPreviewToken = function (listID, slug) {
        return this.request("/lists/".concat(listID, "/posts/").concat(slug, "/preview"), 'POST', null);
    };
    Client.prototype.getPostPreviewUrl = function (listID, slug, token) {
        return "".concat(this.apibase, "/lists/").concat(listID, "/posts/").concat(slug, "/preview?access_token=").concat(token);
    };
    Client.prototype.uploadAttachment = function (formData) {
        return this.requestFormData("/attachments", formData);
    };
    Client.prototype.incCount = function (post_id, field) {
        return this.request("/posts/".concat(field, "?id=").concat(post_id), 'POST', null);
    };
    Client.prototype.getExploreTrendingPosts = function (offset, limit, lang) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 16; }
        if (lang === void 0) { lang = ''; }
        var url = "/explore/trending/posts?offset=".concat(offset, "&limit=").concat(limit);
        if (lang) {
            url += "&lang=".concat(lang);
        }
        return this.request(url, 'GET', null);
    };
    Client.prototype.getExploreTrendingLists = function (offset, limit, lang) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 16; }
        if (lang === void 0) { lang = ''; }
        var url = "/explore/trending/lists?offset=".concat(offset, "&limit=").concat(limit);
        if (lang) {
            url += "&lang=".concat(lang);
        }
        return this.request(url, 'GET', null);
    };
    Client.prototype.getAbuseReportOpponent = function (trace_id) {
        return this.request("/reports/opponent?trace_id=".concat(trace_id), 'GET', null);
    };
    Client.prototype.createAbuseReport = function (payload, ctoken) {
        return this.request("/reports", 'POST', __assign({ 'challenge-action': 'abuse-report', 'challenge-token': ctoken }, payload));
    };
    return Client;
}());

export { Client };
//# sourceMappingURL=quail.min.js.map
